ANOTAÇÕES!

- Formas de acessar os dados do Firebase:
const [userDetails, setUserDetails] = useState<any>('')
  
firestore.collection('cakes').doc(
  "QLEDKyIhI6MbiCMCuGHJ").get()
      .then(snapshot => {
        const data = snapshot.data()
        if (data){
          setUserDetails(data)
        }

      })

// * get one documents in collection firestore
firestore.collection('cakes').doc(
  "QLEDKyIhI6MbiCMCuGHJ").get()
      .then(snapshot => {
        const data = snapshot.data()
          setUserDetails(data)
      })

// * get all documents in collection firestore
async function getMarker() {
  const snapshot = await firestore.collection('cakes').get()
  return snapshot.docs.map(doc => doc.data());
}

setTimeout(() => {
firestore.collection('cakes').doc(
"QLEDKyIhI6MbiCMCuGHJ").get()
  .then(snapshot => {
    const data = snapshot.data()
      console.log(`${JSON.stringify(data)}`)
  })
}, 30*1000)

- Formas de usar o yup e react hook forms:

const validator = yup.object().shape({
    street: yup.string().required()
})
  
const { register, handleSubmit, formState: { errors }} = useForm({
  resolver: yupResolver(validator)
})

// ou

const resolver = yupResolver(validator)
const { register, handleSubmit, formState: { errors }} = useForm(resolver)

- yup
street: pickupLocal ? (yup.string()) : (yup.string().required("Tá errado aqui")),

/**
 * * Backlog:
 * TODO Corrigir "Recheio(s)" no card de pedidos; ✔
 * TODO Terminar estilização da página de sacola; ✔
 * TODO Alterar número para Doce&Cia; 
 * ! Hospedagem;
 * ! Responsividade de todo site;
 * ! Regras do firebase
 */